// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.PneumaticsModuleType;
import edu.wpi.first.wpilibj.Solenoid;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class Arm extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private WPI_TalonSRX armMotor;
private Solenoid intakePiston1;
private Solenoid intakePiston2;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    //PID VALUES
    private final static double SPEED_P_CONSTANT = 0.05;
    private final static double SPEED_I_CONSTANT = 0.0003;
    private final static double SPEED_D_CONSTANT = 0.0;
    private final static double SPEED_F_CONSTANT = 0.0;
    
    public double speedP = SPEED_P_CONSTANT;
    public double speedI = SPEED_I_CONSTANT;
    public double speedD = SPEED_D_CONSTANT;
    public double speedF = SPEED_F_CONSTANT;
    public final static int PID_SLOT_SPEED_MODE = 0;
    /**
    *
    */
    public Arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
armMotor = new WPI_TalonSRX(0);
 
 

intakePiston1 = new Solenoid(0, PneumaticsModuleType.CTREPCM, 0);
 addChild("intakePiston1", intakePiston1);
 

intakePiston2 = new Solenoid(0, PneumaticsModuleType.CTREPCM, 2);
 addChild("intakePiston2", intakePiston2);
 


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    initializeMotor();
    }
    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        SmartDashboard.putBoolean("IntakePiston1", intakePiston1.get());
        SmartDashboard.putBoolean("IntakePiston2", intakePiston2.get());
        //SmartDashboard.putNumber("Arm Speed", isAtSpeed);
    }
    public void stop() {
        armMotor.set(0);
        //armMotor.setNeutralMode(NeutralMode.Coast);
    }
    public void initSpeedMode() {
        armMotor.set(ControlMode.PercentOutput, 0);
        armMotor.config_kP(PID_SLOT_SPEED_MODE, speedP);
        armMotor.config_kI(PID_SLOT_SPEED_MODE, speedI);
        armMotor.config_kD(PID_SLOT_SPEED_MODE, speedD);
        armMotor.config_kF(PID_SLOT_SPEED_MODE, speedF);
        armMotor.selectProfileSlot(PID_SLOT_SPEED_MODE, 0);
        armMotor.set(ControlMode.PercentOutput, 0);
    }
    public void run(double pow) {armMotor.set(pow);}
    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public void initializeMotor() {
        //armMotor.setInverted(true);
    }
    public void setBrakeMode() {
        armMotor.setNeutralMode(NeutralMode.Brake);
    }
    public void setCoastMode() {
        armMotor.setNeutralMode(NeutralMode.Coast);
    }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void intakeCargo (Double pow) { //
        armMotor.set(ControlMode.PercentOutput, pow);
    }
    public void deliverCargo(Double pow) {
        armMotor.set(ControlMode.PercentOutput, -pow);
    }
    public void liftArm() { //activate solenoids on both sides of the robot, raise arm.
        intakePiston1.set(true);
        intakePiston2.set(true);
    }
    public void lowerArm() { //deactive solenoids on both ends of the robot, lower arm.
        intakePiston1.set(false);
        intakePiston2.set(false);
    }

}
