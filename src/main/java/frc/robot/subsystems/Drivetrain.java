// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.kinematics.DifferentialDriveOdometry;
import edu.wpi.first.math.kinematics.DifferentialDriveWheelSpeeds;
import edu.wpi.first.wpilibj.SerialPort.Port;
import edu.wpi.first.wpilibj.motorcontrol.MotorControllerGroup;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Constants;
import frc.robot.Constants.DriveConstants;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
import com.kauailabs.navx.frc.AHRS;
import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

/**
 *
 */
public class Drivetrain extends SubsystemBase {
	
	public final AHRS m_gyro = new AHRS(Port.kUSB);
    public final DifferentialDriveOdometry m_odometry = new DifferentialDriveOdometry(m_gyro.getRotation2d());
	
	private WPI_TalonFX leftFrontMotor =  new WPI_TalonFX(13); 
	private WPI_TalonFX leftMidMotor = new WPI_TalonFX(14);
	private WPI_TalonFX leftBackMotor = new WPI_TalonFX(15);
	private WPI_TalonFX rightFrontMotor = new WPI_TalonFX(2);
	private WPI_TalonFX rightMidMotor = new WPI_TalonFX(1);
	private WPI_TalonFX rightBackMotor = new WPI_TalonFX(3);
    private final MotorControllerGroup m_leftMotors = new MotorControllerGroup(leftFrontMotor, leftMidMotor, leftBackMotor);
	private final MotorControllerGroup m_rightMotors = new MotorControllerGroup(rightFrontMotor, rightMidMotor, rightBackMotor); 
	private static boolean isReversed = false;
	private static double m_distance;
	private static final double THRESHOLD = 200;
 	private boolean halfSpeed = false;
	private boolean quarterSpeed = false;
	public final static int PID_SLOT_SPEED_MODE = 0;
	private final static double SPEED_P_CONSTANT = 0.1;
	private final static double SPEED_I_CONSTANT = 0.0005;
	private final static double SPEED_D_CONSTANT = 0.0;
	private final static double SPEED_F_CONSTANT = 0.0;
    
    public double speedP = SPEED_P_CONSTANT;
	public double speedI = SPEED_I_CONSTANT;
	public double speedD = SPEED_D_CONSTANT;
    public double speedF = SPEED_F_CONSTANT;
	private final int TIMEOUT_MS = 10;
    

	private final static int kTimeoutMs = 30;

	public Drivetrain() {
		initializeMotors();
		setBrakeMode();
		resetEncoders();
	}

	@Override
	public void periodic() {
		// This method will be called once per scheduler run
		double leftEnc = getLeftEncoder();
		double rightEnc = getRightEncoder();
		SmartDashboard.putNumber("leftEnc", leftEnc);
		SmartDashboard.putNumber("rightEnc", rightEnc);
		SmartDashboard.putNumber("POSE X", m_odometry.getPoseMeters().getX());
		SmartDashboard.putNumber("POSE Y", m_odometry.getPoseMeters().getY());
		m_odometry.update(m_gyro.getRotation2d(), leftEnc*Constants.DriveConstants.kEncoderDistancePerPulse, 
			rightEnc*Constants.DriveConstants.kEncoderDistancePerPulse);
	}

	@Override
	public void simulationPeriodic() {
		// This method will be called once per scheduler run when in simulation
	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void zeroOdometry() {
		resetEncoders();
		m_odometry.resetPosition(new Pose2d(), m_gyro.getRotation2d());
	}
	public void driveBySpeed(double speed) {
		leftFrontMotor.set(TalonFXControlMode.Velocity, speed);
		rightFrontMotor.set(TalonFXControlMode.Velocity, speed);
		;
	}

	public void resetOdometry(Pose2d poseMeters){
		m_odometry.resetPosition(poseMeters, m_gyro.getRotation2d());
	}

	public void initializeMotors() {
		leftFrontMotor.configFactoryDefault();
		rightFrontMotor.configFactoryDefault();

		rightBackMotor.setInverted(true);
		rightMidMotor.setInverted(true);
		rightFrontMotor.setInverted(true);

		rightBackMotor.follow(rightFrontMotor);
		rightMidMotor.follow(rightFrontMotor);
		leftBackMotor.follow(leftFrontMotor);
		leftMidMotor.follow(leftFrontMotor);

		rightBackMotor.configOpenloopRamp(0.5);
		rightFrontMotor.configOpenloopRamp(0.5);
		rightMidMotor.configOpenloopRamp(0.5);
		leftBackMotor.configOpenloopRamp(0.5);
		leftFrontMotor.configOpenloopRamp(0.5);
		leftMidMotor.configOpenloopRamp(0.5);
	}
	public void initSpeedMode() {    	
    	leftFrontMotor.set(ControlMode.Velocity, 0);
        
        leftFrontMotor.config_kP(PID_SLOT_SPEED_MODE, speedP, TIMEOUT_MS);
    	leftFrontMotor.config_kI(PID_SLOT_SPEED_MODE, speedI, TIMEOUT_MS);
    	leftFrontMotor.config_kD(PID_SLOT_SPEED_MODE, speedD, TIMEOUT_MS);
    	leftFrontMotor.config_kF(PID_SLOT_SPEED_MODE, speedF, TIMEOUT_MS);

    
        leftFrontMotor.selectProfileSlot(PID_SLOT_SPEED_MODE, 0);
        
        leftFrontMotor.set(ControlMode.Velocity, 0);
		rightFrontMotor.set(ControlMode.Velocity, 0);
        
        rightFrontMotor.config_kP(PID_SLOT_SPEED_MODE, speedP, TIMEOUT_MS);
    	rightFrontMotor.config_kI(PID_SLOT_SPEED_MODE, speedI, TIMEOUT_MS);
    	rightFrontMotor.config_kD(PID_SLOT_SPEED_MODE, speedD, TIMEOUT_MS);
    	rightFrontMotor.config_kF(PID_SLOT_SPEED_MODE, speedF, TIMEOUT_MS);

    
        rightFrontMotor.selectProfileSlot(PID_SLOT_SPEED_MODE, 0);
        
        rightFrontMotor.set(ControlMode.Velocity, 0);
    }

	public void setBrakeMode() {
		leftFrontMotor.setNeutralMode(NeutralMode.Brake);
		rightFrontMotor.setNeutralMode(NeutralMode.Brake);
	}

	public void setCoastMode() {
		leftFrontMotor.setNeutralMode(NeutralMode.Coast);
		rightFrontMotor.setNeutralMode(NeutralMode.Coast);
	}

	public void run(double l, double r) {
		if (isReversed) {
			l *= -1; // inverse left motor speed
			r *= -1; // inverse right motor speed
		}
		if (halfSpeed) {
			l *= 0.5;
			r *= 0.5;
		} else if (quarterSpeed) {
			l *= 0.25;
			r *= 0.25;
		}
		leftFrontMotor.set(l);
		rightFrontMotor.set(r);
	}

	public void stopL() { leftFrontMotor.set(0); }

	public void stopR() { rightFrontMotor.set(0); }

	public void stop() {
		leftFrontMotor.set(0);
		rightFrontMotor.set(0);
	}

	public void setControlMode(ControlMode mode) {
		leftFrontMotor.set(mode, 0);
		rightFrontMotor.set(mode, 0);
	}

	public ControlMode getControlMode() {
		return leftFrontMotor.getControlMode();
	}

	public void setReversed(boolean rev) { isReversed = rev; }

	public boolean getReversed() { return isReversed; }

	public void toggleReversed(){ isReversed = !isReversed; }

	public void setHalfSpeed() {
		halfSpeed = true;
		quarterSpeed = false;
	}

	public void setQuarterSpeed() {
		quarterSpeed = true;
		halfSpeed = false;
	}

	public void setFullSpeed(){
		halfSpeed = false;
		quarterSpeed = false;
	}

	public void resetEncoders() {
		leftFrontMotor.getSensorCollection().setIntegratedSensorPosition(0, kTimeoutMs);
		rightFrontMotor.getSensorCollection().setIntegratedSensorPosition(0, kTimeoutMs);
	}

	public double getLeftEncoder() {
		return leftFrontMotor.getSelectedSensorPosition();
	}

	public double getRightEncoder() {
		return rightFrontMotor.getSelectedSensorPosition();
	}

	public void tankDriveVolts(double leftVolts, double rightVolts) {
        m_leftMotors.setVoltage(leftVolts); 
        m_rightMotors.setVoltage(rightVolts);
        SmartDashboard.putNumber("HEADING", m_odometry.getPoseMeters().getRotation().getDegrees());
    }

	public DifferentialDriveWheelSpeeds getWheelSpeeds() {
        return new DifferentialDriveWheelSpeeds(
            leftFrontMotor.getSelectedSensorVelocity() * DriveConstants.kEncoderDistancePerPulse,
            rightFrontMotor.getSelectedSensorVelocity() * DriveConstants.kEncoderDistancePerPulse);
	}

	public Pose2d getPose(){
		return m_odometry.getPoseMeters();
	}


	//the following are for motion magic

	public void initMotionMagic(double distance){
		TalonFXConfiguration _leftConfig = new TalonFXConfiguration();
		TalonFXConfiguration _rightConfig = new TalonFXConfiguration();
		
		rightFrontMotor.set(TalonFXControlMode.PercentOutput, 0);
		leftFrontMotor.set(TalonFXControlMode.PercentOutput,0);

		leftFrontMotor.setNeutralMode(NeutralMode.Brake);
		rightFrontMotor.setNeutralMode(NeutralMode.Brake);

		_leftConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice();
		
		/*
		 * Configure the Remote Talon's selected sensor as a remote sensor for the right
		 * Talon
		 */
		_rightConfig.remoteFilter0.remoteSensorDeviceID = leftFrontMotor.getDeviceID(); // Device ID of Source
		_rightConfig.remoteFilter0.remoteSensorSource = RemoteSensorSource.TalonFX_SelectedSensor; // Remote Feedback
																									// Source
		/*
		 * Now that the Left sensor can be used by the master Talon,
		 * set up the Left (Aux) and Right (Master) distance into a single
		 * Robot distance as the Master's Selected Sensor 0.
		 */
		TalonFXInvertType _rightInvert = TalonFXInvertType.Clockwise; // Same as invert = "true"
		setRobotDistanceConfigs(_rightInvert, _rightConfig);
	
		/*
		 * Setup difference signal to be used for turn when performing Drive Straight
		 * with encoders
		 */
		setRobotTurnConfigs(_rightInvert, _rightConfig);

		/* Configure neutral deadband */
		_rightConfig.neutralDeadband = Constants.DriveConstants.kNeutralDeadband;
		_leftConfig.neutralDeadband = Constants.DriveConstants.kNeutralDeadband;
		
		/* Motion Magic Configurations */
		_rightConfig.motionAcceleration = Constants.DriveConstants.MM_ACC;
		_rightConfig.motionCruiseVelocity = Constants.DriveConstants.MM_VEL;

		/**
		 * Max out the peak output (for all modes).
		 * However you can limit the output of a given PID object with
		 * configClosedLoopPeakOutput().
		 */
		_leftConfig.peakOutputForward = +1.0;
		_leftConfig.peakOutputReverse = -1.0;
		_rightConfig.peakOutputForward = +1.0;
		_rightConfig.peakOutputReverse = -1.0;

		/* FPID Gains for distance servo */
		_rightConfig.slot0.kP = Constants.DriveConstants.DISTANCE_kP;
		_rightConfig.slot0.kI = Constants.DriveConstants.DISTANCE_kI;
		_rightConfig.slot0.kD = Constants.DriveConstants.DISTANCE_kD;
		_rightConfig.slot0.kF = Constants.DriveConstants.DISTANCE_kF;
		_rightConfig.slot0.integralZone = Constants.DriveConstants.DISTANCE_kIzone;
		_rightConfig.slot0.closedLoopPeakOutput = Constants.DriveConstants.DISTANCE_PEAK;
		_rightConfig.slot0.allowableClosedloopError = 0;

		/* FPID Gains for turn servo */
		_rightConfig.slot1.kP = Constants.DriveConstants.TURN_kP;
		_rightConfig.slot1.kI = Constants.DriveConstants.TURN_kI;
		_rightConfig.slot1.kD = Constants.DriveConstants.TURN_kD;
		_rightConfig.slot1.kF = Constants.DriveConstants.TURN_kF;
		_rightConfig.slot1.integralZone = Constants.DriveConstants.TURN_kIzone;
		_rightConfig.slot1.closedLoopPeakOutput = Constants.DriveConstants.TURN_PEAK;
		_rightConfig.slot1.allowableClosedloopError = 0;
		
		int closedLoopTimeMs = 1;
		_rightConfig.slot0.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot1.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot2.closedLoopPeriod = closedLoopTimeMs;
		_rightConfig.slot3.closedLoopPeriod = closedLoopTimeMs;

		leftFrontMotor.configAllSettings(_leftConfig);
		rightFrontMotor.configAllSettings(_rightConfig);

		/* Set status frame periods to ensure we don't have stale data */
		rightFrontMotor.setStatusFramePeriod(StatusFrame.Status_12_Feedback1, 20, kTimeoutMs);
		rightFrontMotor.setStatusFramePeriod(StatusFrame.Status_13_Base_PIDF0, 20, kTimeoutMs);
		rightFrontMotor.setStatusFramePeriod(StatusFrame.Status_14_Turn_PIDF1, 20, kTimeoutMs);
		rightFrontMotor.setStatusFramePeriod(StatusFrame.Status_10_Targets, 20, kTimeoutMs);
		leftFrontMotor.setStatusFramePeriod(StatusFrame.Status_2_Feedback0, 5, kTimeoutMs);

		/* Initialize */
		rightFrontMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_Targets, 10);
		resetEncoders();

		m_distance = distance;
		m_distance *= Constants.DriveConstants.TICKSPERFEET;

		rightFrontMotor.selectProfileSlot(Constants.DriveConstants.kSlot_Distance, Constants.DriveConstants.PID_PRIMARY);
		rightFrontMotor.selectProfileSlot(Constants.DriveConstants.kSlot_Turning, Constants.DriveConstants.PID_TURN);

		double target_turn = rightFrontMotor.getSelectedSensorPosition(1);

		rightFrontMotor.set(TalonFXControlMode.MotionMagic, m_distance, DemandType.AuxPID, target_turn);
		leftFrontMotor.follow(rightFrontMotor, FollowerType.AuxOutput1);
	}

	public void setRobotDistanceConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig) {
		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise) {
			masterConfig.diff0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local Integrated
																								// Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference.toFeedbackDevice(); // Diff0
																														// -
																													// Diff1
		} else {
			/* Master is not inverted, both sides are positive so we can sum them. */
			masterConfig.sum0Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local IntegratedSensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); // Sum0
																													// +
																													// Sum1
		}

		/*
		 * Since the Distance is the sum of the two sides, divide by 2 so the total
		 * isn't double
		 * the real-world value
		 */
		masterConfig.primaryPID.selectedFeedbackCoefficient = 0.5;
	}

	public void setRobotTurnConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig) {
		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise) {
			masterConfig.sum0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local Integrated
																								// Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.auxiliaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); // Sum0
																													// +
																													// Sum1
			masterConfig.auxPIDPolarity = true;
		} else {
			/* Master is not inverted, both sides are positive so we can diff them. */
			masterConfig.diff0Term = TalonFXFeedbackDevice.RemoteSensor1.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local
																								// IntegratedSensor
			masterConfig.auxiliaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference
					.toFeedbackDevice(); // Sum0 + Sum1
			/*
			 * With current diff terms, a counterclockwise rotation results in negative
			 * heading with a right master
			 */
			masterConfig.auxPIDPolarity = true;
		}
		masterConfig.auxiliaryPID.selectedFeedbackCoefficient = 1;
	}

	public boolean isAtPIDDestination() {
		return (Math.abs(m_distance) - Math.abs(getLeftEncoder()) < THRESHOLD
				|| Math.abs(m_distance) - Math.abs(getRightEncoder()) < THRESHOLD);
	}
}
