// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard; 
import edu.wpi.first.wpilibj.util.Color; 
import edu.wpi.first.wpilibj2.command.Subsystem; 
import edu.wpi.first.wpilibj.I2C;
import com.revrobotics.ColorSensorV3;
import com.revrobotics.ColorSensorV3.RawColor;
import com.revrobotics.ColorMatchResult; 
import com.revrobotics.ColorMatch;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class ColorSensor extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    //private final I2C.Port i2cPort = I2C.Port.kOnboard;
    private String colorString = "Hello"; //string of the color returned by the sensor
    private final ColorSensorV3 sensor; //sensor object
    private final int kMultiplexerAddress = 0x70; //Change if we have a different address
    private static I2C multiplexer; //multiplexer, duh
    private final int port; //port where the colorsensor is located?
    

    public ColorSensor(I2C.Port i2cPort, int port) {
        if (multiplexer == null) {
          multiplexer = new I2C(i2cPort, kMultiplexerAddress);
        }
        this.port = port;
        setChannel();
        sensor = new ColorSensorV3(i2cPort);
      }
      public void setChannel() { //Sets the channel for whichever color sensor side it is...
        multiplexer.write(kMultiplexerAddress, 1 << port);
      }
      public Color getColor() {
        setChannel();
        return sensor.getColor();
      }
      public int getProximity() {
        setChannel();
        return sensor.getProximity();
      }
      public RawColor getRawColor() {
        setChannel();
        return sensor.getRawColor();
      }
      //rgb values
      public int getRed() {
        setChannel();
        return sensor.getRed();
      }
      public int getGreen() {
        setChannel();
        return sensor.getGreen();
      }
      public int getBlue() {
        setChannel();
        return sensor.getBlue();
      }
      public int getIR() {
        //infrared, not really useful??
        setChannel();
        return sensor.getIR();
      }
      public boolean hasReset() {
        setChannel();
        return sensor.hasReset();
      }
      public String getColorString(){ //returns a string of a color
        return colorString;
      }
    
}

