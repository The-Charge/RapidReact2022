// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.RobotContainer;
import frc.robot.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.subsystems.ColorSensor;
import frc.robot.subsystems.Drivetrain;
import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.util.Color; 
import com.revrobotics.ColorMatchResult; 
import com.revrobotics.ColorMatch;
import com.revrobotics.ColorSensorV3;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class Aligner extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    private final ColorSensor leftColorSensor;
    private final ColorSensor rightColorSensor;
    private final Color kBlueTarget = new Color(0.143, 0.427, 0.429);
    private final Color kGreenTarget = new Color(0.197, 0.561, 0.240);
    private final Color kRedTarget = new Color(0.561, 0.232, 0.114);
    private final Color kYellowTarget = new Color(0.361, 0.524, 0.113);
    private final ColorMatch m_colorMatcher = new ColorMatch();
    private final Drivetrain m_drivetrain;
    public Aligner(Drivetrain subsystem) {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        m_drivetrain = subsystem;
        //addRequirements(m_drivetrain);
        leftColorSensor = new ColorSensor(I2C.Port.kOnboard, 3);
        rightColorSensor = new ColorSensor(I2C.Port.kOnboard, 7);
    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }
    public String ColorSensed(Color detectedColor){
        /**
         * Run the color match algorithm on our detected color
         * Match color returned from the sensor to the pre-established values to determine the color detected
         */
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
        String colorString;
        if (match.color == kBlueTarget) {
          colorString = "Blue";
        } else if (match.color == kRedTarget) {
          colorString = "Red";
        } else if (match.color == kGreenTarget) {
          colorString = "Green";
        } else if (match.color == kYellowTarget) {
          colorString = "Yellow";
        } else {
          colorString = "Change"; 
        }
        return colorString;
      }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void Aligning(){
        //rebuilt aligning process
        double leftSpeed, rightSpeed;
        rightSpeed = -RobotContainer.getInstance().getrightJoystick().getY();
        leftSpeed = -RobotContainer.getInstance().getleftJoystick().getY();
        String leftColor = ColorSensed(leftColorSensor.getColor());
        String rightColor = ColorSensed(rightColorSensor.getColor());
        SmartDashboard.putString("LeftColor", leftColor);
        SmartDashboard.putString("rightColor", rightColor);
        SmartDashboard.putString("LeftColorNum", leftColorSensor.getColor().toString());
        SmartDashboard.putString("rightColorNum", rightColorSensor.getColor().toString());
        if (leftColor.equals("Red") || leftColor.equals("Blue")) {
            leftSpeed = 0;
        }
        if (rightColor.equals("Red") || rightColor.equals("Blue")) {
            rightSpeed = 0;
        }
        SmartDashboard.putNumber("LeftSpeed", leftSpeed);
        SmartDashboard.putNumber("rightSpeed", rightSpeed);
        //m_drivetrain.run(leftSpeed*0.25, rightSpeed*0.25);
    }
}

