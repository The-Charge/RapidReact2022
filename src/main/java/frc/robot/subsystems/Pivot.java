// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
import frc.robot.Robot;
import frc.robot.RobotContainer;

import com.ctre.phoenix.motorcontrol.ControlMode;
import com.ctre.phoenix.motorcontrol.DemandType;
import com.ctre.phoenix.motorcontrol.FollowerType;
import com.ctre.phoenix.motorcontrol.NeutralMode;
import com.ctre.phoenix.motorcontrol.RemoteSensorSource;
import com.ctre.phoenix.motorcontrol.StatusFrame;
import com.ctre.phoenix.motorcontrol.StatusFrameEnhanced;
import com.ctre.phoenix.motorcontrol.TalonFXControlMode;
import com.ctre.phoenix.motorcontrol.TalonFXFeedbackDevice;
import com.ctre.phoenix.motorcontrol.TalonFXInvertType;
import com.ctre.phoenix.motorcontrol.can.TalonFXConfiguration;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonFX;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class Pivot extends SubsystemBase {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private WPI_TalonFX leftPivotMotor;
	private WPI_TalonFX rightPivotMotor;

	private DigitalInput sensor;

	private PIDController m_controller;

	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	private static final double PIVOT_VEL = 2000;
	private static final double PIVOT_ACC = 2000;

	private static double m_angle = 0;
	private static int THRESHOLD = 50;
	private static final double TICKSPERDEGREE = 90;
	private static final double MAX_GRAVITY_FF = 0.07;
	private static final double HORIZONTAL_POS = 0;

	private static final int kTimeoutMs = 30;
	private static final int PID_INDEX = 0;
	private static final int PID_SLOT = 0;

	private static final double PIVOT_kP = 0.2;
	private static final double PIVOT_kI = 0.0005;
	private static final double PIVOT_kD = 0.0;
	private static final double PIVOT_kF = 0;
	private static final int PIVOT_SMOOTHING = 4;

	private static final double MAX_TEMP = 35;

	TalonFXInvertType _leftInvert = TalonFXInvertType.Clockwise; // Same as invert = "false"
	TalonFXInvertType _rightInvert = TalonFXInvertType.Clockwise; // Same as invert = "true"

	/** Config Objects for motor controllers */
	TalonFXConfiguration _leftConfig = new TalonFXConfiguration();
	TalonFXConfiguration _rightConfig = new TalonFXConfiguration();

	private final static double kNeutralDeadband = 0.001;

	private final static int REMOTE_0 = 0;
	private final static int REMOTE_1 = 1;
	private final static int PID_PRIMARY = 0;
	private final static int PID_TURN = 1;
	private final static int kSlot_Distance = 0;
	private final static int kSlot_Turning = 1;

	private static final double DISTANCE_kP = 0.04;
	private static final double DISTANCE_kI = 0.0005;
	private static final double DISTANCE_kD = 0.0;
	private static final double DISTANCE_kF = 0.0;
	private static final double DISTANCE_kIzone = 100;
	private static final double DISTANCE_PEAK = 0.50;

	private static final double TURN_kP = 0.01;
	private static final double TURN_kI = 0.0002;
	private static final double TURN_kD = 4.0;
	private static final double TURN_kF = 0.0;
	private static final double TURN_kIzone = 200;
	private static final double TURN_PEAK = 1.00;

	/**
	*
	*/
	public Pivot() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
		leftPivotMotor = new WPI_TalonFX(5);

		rightPivotMotor = new WPI_TalonFX(6);

		sensor = new DigitalInput(9);

		m_controller = new PIDController(0.02, 0.001, 0);

		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	}

	@Override
	public void periodic() {
		// This method will be called once per scheduler run
		SmartDashboard.putNumber("Pivot Left Enc", leftPivotMotor.getSelectedSensorPosition());
		SmartDashboard.putNumber("Pivot Right Enc", rightPivotMotor.getSelectedSensorPosition());

		SmartDashboard.putNumber("Pivot ANGLE", m_angle);
		SmartDashboard.putBoolean("Pivot Sensor", getSensor());

	}

	@Override
	public void simulationPeriodic() {
		// This method will be called once per scheduler run when in simulation

	}

	// Put methods for controlling this subsystem
	// here. Call these from Commands.

	public void zeroSensors() {
		leftPivotMotor.getSensorCollection().setIntegratedSensorPosition(0, kTimeoutMs);
		rightPivotMotor.getSensorCollection().setIntegratedSensorPosition(0, kTimeoutMs);
	}

	public void setRobotDistanceConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig) {
		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise) {
			masterConfig.diff0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local Integrated
																								// Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference.toFeedbackDevice(); // Diff0
																														// -
																														// Diff1
		} else {
			/* Master is not inverted, both sides are positive so we can sum them. */
			masterConfig.sum0Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local IntegratedSensor
			masterConfig.primaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); // Sum0
																													// +
																													// Sum1
		}

		/*
		 * Since the Distance is the sum of the two sides, divide by 2 so the total
		 * isn't double the real-world value
		 */
		masterConfig.primaryPID.selectedFeedbackCoefficient = 0.5;
	}

	public void setRobotTurnConfigs(TalonFXInvertType masterInvertType, TalonFXConfiguration masterConfig) {
		/* Check if we're inverted */
		if (masterInvertType == TalonFXInvertType.Clockwise) {
			masterConfig.sum0Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local Integrated
																								// Sensor
			masterConfig.sum1Term = TalonFXFeedbackDevice.RemoteSensor0.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.auxiliaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorSum.toFeedbackDevice(); // Sum0
																													// +
																													// Sum1
			masterConfig.auxPIDPolarity = true;
		} else {
			/* Master is not inverted, both sides are positive so we can diff them. */
			masterConfig.diff0Term = TalonFXFeedbackDevice.RemoteSensor1.toFeedbackDevice(); // Aux Selected Sensor
			masterConfig.diff1Term = TalonFXFeedbackDevice.IntegratedSensor.toFeedbackDevice(); // Local
																								// IntegratedSensor
			masterConfig.auxiliaryPID.selectedFeedbackSensor = TalonFXFeedbackDevice.SensorDifference
					.toFeedbackDevice(); // Sum0 + Sum1
			/*
			 * With current diff terms, a counterclockwise rotation results in negative
			 * heading with a right master
			 */
			masterConfig.auxPIDPolarity = true;
		}
		masterConfig.auxiliaryPID.selectedFeedbackCoefficient = 1;
	}

	public void initializeMotors() {
		leftPivotMotor.setInverted(true);
		rightPivotMotor.setInverted(true);
		leftPivotMotor.setNeutralMode(NeutralMode.Brake);
		rightPivotMotor.setNeutralMode(NeutralMode.Brake);
	}

	public void initDefaultMM() {

		leftPivotMotor.configFactoryDefault();
		rightPivotMotor.configFactoryDefault();

		initializeMotors();
		resetPivotEncoders();

		leftPivotMotor.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, PID_INDEX, kTimeoutMs);

		leftPivotMotor.configNeutralDeadband(0.001, kTimeoutMs);

		leftPivotMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, kTimeoutMs);
		leftPivotMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, kTimeoutMs);

		/* Set the peak and nominal outputs */
		leftPivotMotor.configNominalOutputForward(0, kTimeoutMs);
		leftPivotMotor.configNominalOutputReverse(0, kTimeoutMs);
		leftPivotMotor.configPeakOutputForward(1, kTimeoutMs);
		leftPivotMotor.configPeakOutputReverse(-1, kTimeoutMs);

		/* Set Motion Magic gains in slot0 - see documentation */
		leftPivotMotor.selectProfileSlot(PID_SLOT, PID_INDEX);
		leftPivotMotor.config_kF(PID_SLOT, PIVOT_kF, kTimeoutMs);
		leftPivotMotor.config_kP(PID_SLOT, PIVOT_kP, kTimeoutMs);
		leftPivotMotor.config_kI(PID_SLOT, PIVOT_kI, kTimeoutMs);
		leftPivotMotor.config_kD(PID_SLOT, PIVOT_kD, kTimeoutMs);

		/* Set acceleration and vcruise velocity - see documentation */
		leftPivotMotor.configMotionCruiseVelocity(PIVOT_VEL, kTimeoutMs);
		leftPivotMotor.configMotionAcceleration(PIVOT_ACC, kTimeoutMs);

		/* Zero the sensor once on robot boot up */
		// leftPivotMotor.setSelectedSensorPosition(0, PID_INDEX, kTimeoutMs);

		leftPivotMotor.configMotionSCurveStrength(PIVOT_SMOOTHING);

		rightPivotMotor.configSelectedFeedbackSensor(TalonFXFeedbackDevice.IntegratedSensor, PID_INDEX, kTimeoutMs);

		rightPivotMotor.configNeutralDeadband(0.001, kTimeoutMs);

		rightPivotMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_13_Base_PIDF0, 10, kTimeoutMs);
		rightPivotMotor.setStatusFramePeriod(StatusFrameEnhanced.Status_10_MotionMagic, 10, kTimeoutMs);

		/* Set the peak and nominal outputs */
		rightPivotMotor.configNominalOutputForward(0, kTimeoutMs);
		rightPivotMotor.configNominalOutputReverse(0, kTimeoutMs);
		rightPivotMotor.configPeakOutputForward(1, kTimeoutMs);
		rightPivotMotor.configPeakOutputReverse(-1, kTimeoutMs);

		/* Set Motion Magic gains in slot0 - see documentation */
		rightPivotMotor.selectProfileSlot(PID_SLOT, PID_INDEX);
		rightPivotMotor.config_kF(PID_SLOT, PIVOT_kF, kTimeoutMs);
		rightPivotMotor.config_kP(PID_SLOT, PIVOT_kP, kTimeoutMs);
		rightPivotMotor.config_kI(PID_SLOT, PIVOT_kI, kTimeoutMs);
		rightPivotMotor.config_kD(PID_SLOT, PIVOT_kD, kTimeoutMs);

		/* Set acceleration and vcruise velocity - see documentation */
		rightPivotMotor.configMotionCruiseVelocity(PIVOT_VEL, kTimeoutMs);
		rightPivotMotor.configMotionAcceleration(PIVOT_ACC, kTimeoutMs);

		/* Zero the sensor once on robot boot up */
		// rightPivotMotor.setSelectedSensorPosition(0, PID_INDEX, kTimeoutMs);

		rightPivotMotor.configMotionSCurveStrength(PIVOT_SMOOTHING);

		m_angle = 0;

	}

	public void runDefaultMM(double angle) {
		m_angle = angle * TICKSPERDEGREE;

		double currentPos = leftPivotMotor.getSelectedSensorPosition();
		double degrees = (currentPos - HORIZONTAL_POS) / TICKSPERDEGREE;
		double radians = java.lang.Math.toRadians(degrees);
		double cosineScalar = java.lang.Math.cos(radians);

		leftPivotMotor.set(TalonFXControlMode.MotionMagic, m_angle, DemandType.ArbitraryFeedForward,
				MAX_GRAVITY_FF * cosineScalar);
		rightPivotMotor.set(TalonFXControlMode.MotionMagic, m_angle, DemandType.ArbitraryFeedForward,
				MAX_GRAVITY_FF * cosineScalar);
	}

	public void runGyroMM(double angle){
		m_controller.setSetpoint(angle);
		//m_controller.setTolerance(0.1);
		double next = m_controller.calculate(RobotContainer.getInstance().m_drivetrain.getPitch());

		leftPivotMotor.set(next);
		rightPivotMotor.set(next); 
	}

	public boolean atSetpoint(){
		return m_controller.atSetpoint();
	}

	public double getLeftPivotEncoder() {
		return leftPivotMotor.getSelectedSensorPosition();
	}

	public double getRightPivotEncoder() {
		return rightPivotMotor.getSelectedSensorPosition();
	}

	public void resetPivotEncoders() {
		rightPivotMotor.setSelectedSensorPosition(0);
		leftPivotMotor.setSelectedSensorPosition(0);
	}

	public double getAngle() {
		return m_angle;
	}

	public boolean isPivotAtDestination() {
		return (Math.abs(m_angle) - Math.abs(getLeftPivotEncoder()) < THRESHOLD
				|| Math.abs(m_angle) - Math.abs(getRightPivotEncoder()) < THRESHOLD);
	}

	public void runPivot(double l, double r) {
		leftPivotMotor.set(l);
		rightPivotMotor.set(r);
	}

	public void stopPivot() {
		rightPivotMotor.set(0);
		leftPivotMotor.set(0);
	}

	public void setControlMode(ControlMode mode) {
		leftPivotMotor.set(mode, 0);
		rightPivotMotor.set(mode, 0);
	}

	public boolean pastLimitSwitchLeftTele() {
		return leftPivotMotor.getSensorCollection().isRevLimitSwitchClosed() == 1
				|| leftPivotMotor.getSensorCollection().isFwdLimitSwitchClosed() == 1;
	}

	public boolean pastLimitSwitchRightTele() {
		return rightPivotMotor.getSensorCollection().isRevLimitSwitchClosed() == 1
				|| rightPivotMotor.getSensorCollection().isFwdLimitSwitchClosed() == 1;
	}

	public boolean getSensor() {
		return sensor.get();
	}

}
