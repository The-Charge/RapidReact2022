// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import com.revrobotics.ColorMatch;
import com.revrobotics.ColorMatchResult;

import edu.wpi.first.wpilibj.I2C;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.util.Color;
import edu.wpi.first.wpilibj2.command.CommandBase;
import frc.robot.RobotContainer;
import frc.robot.subsystems.ColorSensor;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Drivetrain;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class ColorAlign extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
        private final Drivetrain m_drivetrain;
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    // private final ColorSensor leftColorSensor;
    // private final ColorSensor rightColorSensor;
    private final ColorSensor zero;
    private final Color kBlueTarget = new Color(0.143, 0.427, 0.429);
    private final Color kGreenTarget = new Color(0.197, 0.561, 0.240);
    private final Color kRedTarget = new Color(0.561, 0.232, 0.114);
    private final Color kYellowTarget = new Color(0.361, 0.524, 0.113);
    private final ColorMatch m_colorMatcher = new ColorMatch();

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS


    public ColorAlign(Drivetrain subsystem) {


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        m_drivetrain = subsystem;
        addRequirements(m_drivetrain);

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES

        // leftColorSensor = new ColorSensor(I2C.Port.kOnboard, 0);
        // rightColorSensor = new ColorSensor(I2C.Port.kOnboard, 1);
        zero = new ColorSensor(I2C.Port.kOnboard, 0);
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
      m_colorMatcher.addColorMatch(kBlueTarget);
      m_colorMatcher.addColorMatch(kGreenTarget);
      m_colorMatcher.addColorMatch(kRedTarget);
      m_colorMatcher.addColorMatch(kYellowTarget);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
      SmartDashboard.putString("COLORON", "True");
      Aligning();
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return false;
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }

    public String ColorSensed(Color detectedColor){
        /**
         * Run the color match algorithm on our detected color
         * Match color returned from the sensor to the pre-established values to determine the color detected
         */
        ColorMatchResult match = m_colorMatcher.matchClosestColor(detectedColor);
        String colorString;
        if (match.color == kBlueTarget) {
          colorString = "Blue";
        } else if (match.color == kRedTarget) {
          colorString = "Red";
        } else if (match.color == kGreenTarget) {
          colorString = "Green";
        } else if (match.color == kYellowTarget) {
          colorString = "Yellow";
        } else {
          colorString = "Change"; 
        }
        return colorString;
      }
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void Aligning(){
        //rebuilt aligning process
        double leftSpeed, rightSpeed;
        rightSpeed = -RobotContainer.getInstance().getrightJoystick().getY();
        leftSpeed = -RobotContainer.getInstance().getleftJoystick().getY();
        String rightColor = ColorSensed(zero.getColor());
        // String leftColor = ColorSensed(new Color(255,0,0));
        // String rightColor = ColorSensed(new Color(255,0,0));
        // SmartDashboard.putString("LeftColor", leftColor);
        SmartDashboard.putString("rightColor", rightColor);
        // SmartDashboard.putNumber("LeftColorNum", leftColorSensor.getColor().red);
        // SmartDashboard.putNumber("rightColorNum", rightColorSensor.getColor().red);
        // if (leftColor.equals("Red") || leftColor.equals("Blue")) {
        //     leftSpeed = 0;
        // }
        // if (rightColor.equals("Red") || rightColor.equals("Blue")) {
        //     rightSpeed = 0;
        // }
        // SmartDashboard.putNumber("LeftSpeed", leftSpeed);
        // SmartDashboard.putNumber("rightSpeed", rightSpeed);
        //m_drivetrain.run(leftSpeed*0.25, rightSpeed*0.25);

        SmartDashboard.putBoolean("Address 0", zero.addressOnly());
        // SmartDashboard.putBoolean("Address 1", one.addressOnly());
        // SmartDashboard.putBoolean("Address 2", two.addressOnly());
        // SmartDashboard.putBoolean("Address 3", three.addressOnly());
        // SmartDashboard.putBoolean("Address 4", four.addressOnly());
        // SmartDashboard.putBoolean("Address 5", five.addressOnly());
        // SmartDashboard.putBoolean("Address 6", six.addressOnly());
        // SmartDashboard.putNumber("ADDRESS", one.devAddress());
        // SmartDashboard.putNumber("PORT", one.getPort());
    }
}
