// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import com.ctre.phoenix.motorcontrol.ControlMode;

import edu.wpi.first.wpilibj2.command.CommandBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import frc.robot.subsystems.Telescope;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class AutoTele extends CommandBase {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private final Telescope m_telescope;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
    private double leftSpeed;
    private double rightSpeed;
    private final double setLeftSpeed;
    private final double setRightSpeed;
    private boolean isLeftStopped = false;
    private boolean isRightStopped = false;
    private final boolean isPivotNext;
    private static final double HANG_VOL = -0.3;
 
    
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    public AutoTele(double speed, boolean pivotNext, Telescope subsystem) {
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        setLeftSpeed = speed;
        setRightSpeed = speed;
        isPivotNext = pivotNext;
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        m_telescope = subsystem;
        addRequirements(m_telescope);
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called when the command is initially scheduled.
    @Override
    public void initialize() {
        //m_telescope.initializeMotors();
        leftSpeed = setLeftSpeed;
        rightSpeed = setRightSpeed;
        isLeftStopped = false;
        isRightStopped = false;
        m_telescope.setControlMode(ControlMode.PercentOutput);
        m_telescope.runTele(leftSpeed, rightSpeed);
    }

    // Called every time the scheduler runs while the command is scheduled.
    @Override
    public void execute() {
        if (!isLeftStopped){
            if(m_telescope.isLeftStopped()){
                if (isPivotNext)leftSpeed = HANG_VOL;
                else leftSpeed = 0;
                isLeftStopped = true;
                m_telescope.runTele(leftSpeed,rightSpeed);
            }
        } 
        if (!isRightStopped){
            if(m_telescope.isRightStopped()){
                if (isPivotNext)rightSpeed = HANG_VOL;
                else rightSpeed = 0;
                isRightStopped = true;
                m_telescope.runTele(leftSpeed,rightSpeed);
            }
        } 
    }

    // Called once the command ends or is interrupted.
    @Override
    public void end(boolean interrupted) {
        m_telescope.stopTele();
    }

    // Returns true when the command should end.
    @Override
    public boolean isFinished() {
        return isLeftStopped && isRightStopped;        
    }

    @Override
    public boolean runsWhenDisabled() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
        return false;
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DISABLED
    }
}