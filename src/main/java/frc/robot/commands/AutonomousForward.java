// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Command.

package frc.robot.commands;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;

import edu.wpi.first.math.controller.PIDController;
import edu.wpi.first.math.controller.RamseteController;
import edu.wpi.first.math.controller.SimpleMotorFeedforward;
import edu.wpi.first.math.geometry.Pose2d;
import edu.wpi.first.math.geometry.Rotation2d;
import edu.wpi.first.math.trajectory.Trajectory;
import edu.wpi.first.math.trajectory.TrajectoryConfig;
import edu.wpi.first.math.trajectory.TrajectoryGenerator;
import edu.wpi.first.math.trajectory.TrajectoryUtil;
import edu.wpi.first.math.trajectory.constraint.DifferentialDriveVoltageConstraint;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.Filesystem;
import edu.wpi.first.wpilibj2.command.Command;
import edu.wpi.first.wpilibj2.command.RamseteCommand;
import edu.wpi.first.wpilibj2.command.SequentialCommandGroup;
import frc.robot.Constants.AutoConstants;
import frc.robot.Constants.DriveConstants;
import frc.robot.subsystems.Drivetrain;

public class AutonomousForward extends SequentialCommandGroup {
    Drivetrain m_drivetrain;

    public AutonomousForward(Drivetrain drivetrain) {
        m_drivetrain = drivetrain;
        addRequirements(m_drivetrain);    
        addCommands(getAutomousForward());
    }

    @Override
    public boolean runsWhenDisabled() {
        return false;
    }

    public Command getAutomousForward(){
        try {
            String trajectoryJSON = "output/test1.wpilib.json";
            Path trajectoryPath = Filesystem.getDeployDirectory().toPath().resolve(trajectoryJSON);
            Trajectory exampleTrajectory = TrajectoryUtil.fromPathweaverJson(trajectoryPath);

            //trajectoryJSON = "output/test2.wpilib.json";
            //trajectoryPath = Filesystem.getDeployDirectory().toPath().resolve(trajectoryJSON);
            // Trajectory exampleTrajectory1 = TrajectoryUtil.fromPathweaverJson(trajectoryPath1);
            //exampleTrajectory = exampleTrajectory.concatenate(TrajectoryUtil.fromPathweaverJson(trajectoryPath));

            RamseteCommand ramseteCommand = new RamseteCommand(exampleTrajectory, m_drivetrain::getPose,
                    new RamseteController(AutoConstants.kRamseteB, AutoConstants.kRamseteZeta),
                    new SimpleMotorFeedforward(DriveConstants.ksVolts, DriveConstants.kvVoltSecondsPerMeter,
                            DriveConstants.kaVoltSecondsSquaredPerMeter),
                    DriveConstants.kDriveKinematics, m_drivetrain::getWheelSpeeds,
                    new PIDController(DriveConstants.kPDriveVel, 0, 0),
                    new PIDController(DriveConstants.kPDriveVel, 0, 0),
                    // RamseteCommand passes volts to the callback
                    m_drivetrain::tankDriveVolts, m_drivetrain);

            // Run path following command, then stop at the end.
            return new SequentialCommandGroup(
                new SetPosition(m_drivetrain, exampleTrajectory.getInitialPose()),
                ramseteCommand.andThen(() -> m_drivetrain.tankDriveVolts(0, 0))
            );
        } catch (IOException ex) {
            DriverStation.reportError("Unable to open trajectory", ex.getStackTrace());
            System.out.println("Inside Catch");
        }
        return null;
//        var autoVoltageConstraint = new DifferentialDriveVoltageConstraint(
//            new SimpleMotorFeedforward(DriveConstants.ksVolts, DriveConstants.kvVoltSecondsPerMeter,
//                DriveConstants.kaVoltSecondsSquaredPerMeter),
//                DriveConstants.kDriveKinematics, 10);
        // Create config for trajectory
//        TrajectoryConfig config = new TrajectoryConfig(AutoConstants.kMaxSpeedMetersPerSecond,
//                AutoConstants.kMaxAccelerationMetersPerSecondSquared)
            // Add kinematics to ensure max speed is actually obeyed
//            .setKinematics(DriveConstants.kDriveKinematics)
            // Apply the voltage constraint
//            .addConstraint(autoVoltageConstraint);
//        Trajectory exampleTrajectory = TrajectoryGenerator.generateTrajectory(
            // Start at the origin facing the +X direction
//            new Pose2d(0, 0, new Rotation2d(0)),
            // Pass through these two interior waypoints, making an 's' curve path
//            List.of(
                // new Translation2d(3, 0)
                // new Translation2d(5, -1),
                // new Translation2d(5, -1)
//            ),
            // End 2 meters straight ahead of where we started, facing forward
//            new Pose2d(2, 0, new Rotation2d(0)),
            // Pass config
//            config);
//        m_drivetrain.resetOdometry(exampleTrajectory.getInitialPose());

//        RamseteCommand ramseteCommand = new RamseteCommand(exampleTrajectory, m_drivetrain::getPose, 
//            new RamseteController(AutoConstants.kRamseteB, AutoConstants.kRamseteZeta),
//            new SimpleMotorFeedforward(DriveConstants.ksVolts, DriveConstants.kvVoltSecondsPerMeter,
//                DriveConstants.kaVoltSecondsSquaredPerMeter),
//            DriveConstants.kDriveKinematics, m_drivetrain::getWheelSpeeds, 
//            new PIDController(DriveConstants.kPDriveVel, 0, 0), new PIDController(DriveConstants.kPDriveVel, 0, 0),
//            m_drivetrain::tankDriveVolts, m_drivetrain);
        
        // Run path following command, then stop at the end.
//        return new SequentialCommandGroup( new ZeroPosition(m_drivetrain), ramseteCommand.andThen(() -> m_drivetrain.tankDriveVolts(0, 0)));
    }
}
